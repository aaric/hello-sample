plugins {
    id "java"
    id "io.freefair.lombok" version "4.1.6" apply false
    id "io.spring.dependency-management" version "1.0.10.RELEASE" apply false
    id "org.springframework.boot" version "2.3.2.RELEASE" apply false
}

allprojects {
    group = "com.example"
    version = "0.10.0-SNAPSHOT"

    ext {
        springCloudVersion = "Hoxton.SR8"
        springCloudAlibabaVersion = "2.2.3.RELEASE"
    }

    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://repository.incarcloud.com/content/groups/public" }
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "io.freefair.lombok"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.springframework.boot"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencies {
        implementation "org.slf4j:slf4j-api"

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:$springCloudAlibabaVersion"
        }

        dependencies {
            dependencySet(group: "org.slf4j", version: "1.7.30") {
                entry "slf4j-api"
                entry "slf4j-simple"
                entry "slf4j-log4j12"
            }

            dependency "org.apache.commons:commons-io:1.3.2"
            dependency "org.apache.commons:commons-lang3:3.11"
            dependency "org.apache.commons:commons-collections4:4.4"
            dependency "org.apache.commons:commons-text:1.9"
            dependency "org.apache.commons:commons-csv:1.8"
            dependency "org.apache.commons:commons-email:1.5"
            dependency "org.apache.commons:commons-compress:1.20"
//            dependency "org.apache.commons:commons-rng-simple:1.3"

            dependency "commons-net:commons-net:3.7.2"
            dependency "commons-codec:commons-codec:1.15"
            dependency "commons-beanutils:commons-beanutils:1.9.2"

            dependency "io.swagger:swagger-annotations:1.5.22"
            dependency "io.springfox:springfox-swagger2:2.10.5"
            dependency "com.github.xiaoymin:knife4j-spring-boot-starter:2.0.8"

            dependency "com.auth0:java-jwt:3.11.0"

            dependency "com.github.whvcse:easy-captcha:1.6.2"

            dependency "org.freemarker:freemarker:2.3.30"

            dependency "com.itextpdf:itextpdf:5.5.13.2"
            dependency "org.xhtmlrenderer:core-renderer:R8"
        }
    }

    test {
        useJUnitPlatform()
    }

    task checkstyle(type: Checkstyle) {
        configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
        ignoreFailures true
        showViolations true
        source = fileTree("src")
        include "**/*.java"
        exclude "**/test/**"
        exclude "**/build/**"
        classpath = files()
    }

    task removeLombokConfig() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            def lombokConfigFile = new File(subProjectPath, "lombok.config")
            if (lombokConfigFile.exists()) {
                lombokConfigFile.delete()
            }
        }
    }

    task removeOutputLog() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            subProjectPath.list().each { filename ->
                if (filename.endsWith(".log")) {
                    def logFile = new File(subProjectPath, filename)
                    if (logFile.exists()) {
                        logFile.delete()
                    }
                }
            }
        }
    }

    defaultTasks "assemble"
}
